#include <WiFi.h>
#include "config.h"
#include "wifi_manager.h"
#include "display_manager.h"
#include "input_handler.h"
#include "log_manager.h"
#include "web_server_manager.h"
#include "string_utils.h"
#include "system_manager.h"
#include "audio_manager.h"

#include "log_manager.h"

static unsigned long lastWiFiCheck = 0;
static int wifiReconnectAttempts = 0;

// WiFi Recovery —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
WiFiRecoveryState wifiRecoveryState = WIFI_OK;
static unsigned long wifiDisconnectTime = 0;
static int autoReconnectChecks = 0;
static unsigned long lastAutoReconnectCheck = 0;
static int rebootCountdown = 0;
static unsigned long lastRebootCountdownUpdate = 0;

bool connect_to_wifi() {
    if (wifiConfig.ssid.isEmpty()) {
        log_message("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WiFi –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.");
        return false;
    }

    WiFi.mode(WIFI_STA);
    
    // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –°–¢–†–ò–ú–ò–ù–ì–ê ===
    WiFi.setSleep(false);              // –û—Ç–∫–ª—é—á–∞–µ–º power save - –Ω–µ—Ç –∑–∞–¥–µ—Ä–∂–µ–∫
    WiFi.setAutoReconnect(true);       // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    WiFi.setTxPower(WIFI_POWER_19_5dBm); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
    
    // 2 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    for (int attempt = 0; attempt < 2; attempt++) {
        show_message("Connecting to:", wifiConfig.ssid);
        log_message(formatString("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: %s (–ü–æ–ø—ã—Ç–∫–∞ %d/2)", wifiConfig.ssid.c_str(), attempt + 1));
        
        WiFi.begin(wifiConfig.ssid.c_str(), wifiConfig.password.c_str());
        
        unsigned long startTime = millis();
        unsigned long lastCheckTime = millis();
        int timeout = WIFI_CONNECTION_TIMEOUT;
        
        // –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        while (WiFi.status() != WL_CONNECTED && millis() - startTime < timeout) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 200ms
            if (millis() - lastCheckTime >= 200) {
                lastCheckTime = millis();
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –∑–¥–µ—Å—å
            }
            yield();  // –î–∞–µ–º –≤—Ä–µ–º—è WiFi —Å—Ç–µ–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            delay(10); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è watchdog
        }
        
        if (WiFi.status() == WL_CONNECTED) {
            String ip = WiFi.localIP().toString();
            int rssi = WiFi.RSSI();
            
            show_ip_address(ip, 2000);
            log_message(formatString("‚úÖ WiFi OK: %s (%d dBm)", ip.c_str(), rssi));
            
            // IP display will be handled in main loop()
            // User can click to pause/resume
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–ª–∞–±–æ–º —Å–∏–≥–Ω–∞–ª–µ
            if (rssi < -80) {
                log_message(formatString("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–∞–±—ã–π WiFi —Å–∏–≥–Ω–∞–ª (%d dBm). –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º.", rssi));
            }
            
            wifiReconnectAttempts = 0;
            reset_inactivity_timer();
            return true;
        }
        
        show_message(wifiConfig.ssid, "Failed!", 1500);
        log_message(formatString("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s", wifiConfig.ssid.c_str()));
        WiFi.disconnect();
        
        if (attempt < 1) {  // –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏
            delay(WIFI_RETRY_DELAY);
        }
    }
    
    log_message("–í—Å–µ WiFi –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!");
    wifiReconnectAttempts++;
    return false;
}

// === WiFi Recovery –°–∏—Å—Ç–µ–º–∞ ===
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main loop –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
void handle_wifi_recovery() {
    // –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ STA
    if (systemState != STATE_STA) return;
    
    bool isConnected = (WiFi.status() == WL_CONNECTED);
    
    // === –£–†–û–í–ï–ù–¨ 0: WiFi —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ ===
    if (wifiRecoveryState == WIFI_OK) {
        if (isConnected) {
            return; // –í—Å–µ —Ö–æ—Ä–æ—à–æ
        }
        
        // WiFi –ø–æ—Ç–µ—Ä—è–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç
        wifiRecoveryState = WIFI_AUTO_RECONNECTING;
        wifiDisconnectTime = millis();
        autoReconnectChecks = 0;
        lastAutoReconnectCheck = millis();
        
        log_message("‚ö†Ô∏è WiFi –ø–æ—Ç–µ—Ä—è–Ω! –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞...");
        show_message("WiFi lost", "Reconnecting...");
        return;
    }
    
    // === –£–†–û–í–ï–ù–¨ 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (0-40s) ===
    if (wifiRecoveryState == WIFI_AUTO_RECONNECTING) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (isConnected) {
            wifiRecoveryState = WIFI_OK;
            log_message("‚úÖ WiFi –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
            show_ip_address(WiFi.localIP().toString(), 2000);
            // IP display handled in main loop
            reset_inactivity_timer();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if (millis() - lastAutoReconnectCheck >= WIFI_AUTO_RECONNECT_INTERVAL) {
            lastAutoReconnectCheck = millis();
            autoReconnectChecks++;
            
            log_message(formatString("üîÑ –ê–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ %d/%d", autoReconnectChecks, WIFI_AUTO_RECONNECT_CHECKS));
            
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 4 –ø—Ä–æ–≤–µ—Ä–∫–∏ (40 —Å–µ–∫) - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç—É
            if (autoReconnectChecks >= WIFI_AUTO_RECONNECT_CHECKS) {
                wifiRecoveryState = WIFI_MANUAL_RECONNECTING;
                log_message("‚ö†Ô∏è –ê–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
                show_message("Manual", "Reconnect...");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ —Ä—É—á–Ω—ã–º —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º
                force_audio_reset();
            }
        }
        return;
    }
    
    // === –£–†–û–í–ï–ù–¨ 2: –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (40-90s) ===
    if (wifiRecoveryState == WIFI_MANUAL_RECONNECTING) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
        unsigned long elapsedTime = millis() - wifiDisconnectTime;
        
        if (elapsedTime < WIFI_MANUAL_RECONNECT_TIMEOUT + (WIFI_AUTO_RECONNECT_CHECKS * WIFI_AUTO_RECONNECT_INTERVAL)) {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            log_message("üîß –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
            
            if (connect_to_wifi()) {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!
                wifiRecoveryState = WIFI_OK;
                log_message("‚úÖ WiFi –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!");
                reset_inactivity_timer();
                return;
            }
            
            // –ù–µ —É–¥–∞–ª–æ—Å—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            wifiRecoveryState = WIFI_FAILED_REBOOTING;
            rebootCountdown = WIFI_REBOOT_COUNTDOWN;
            lastRebootCountdownUpdate = millis();
            log_message(formatString("‚ùå –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ %d —Å–µ–∫...", rebootCountdown));
        } else {
            // –¢–∞–π–º–∞—É—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            wifiRecoveryState = WIFI_FAILED_REBOOTING;
            rebootCountdown = WIFI_REBOOT_COUNTDOWN;
            lastRebootCountdownUpdate = millis();
            log_message(formatString("‚ùå –¢–∞–π–º–∞—É—Ç —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ %d —Å–µ–∫...", rebootCountdown));
        }
        return;
    }
    
    // === –£–†–û–í–ï–ù–¨ 3: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (5s countdown) ===
    if (wifiRecoveryState == WIFI_FAILED_REBOOTING) {
        // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        if (millis() - lastRebootCountdownUpdate >= 1000) {
            lastRebootCountdownUpdate = millis();
            rebootCountdown--;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π
            show_message("WiFi Error!", "Rebooting in " + String(rebootCountdown) + "s");
            log_message(formatString("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ %d —Å–µ–∫...", rebootCountdown));
            
            if (rebootCountdown <= 0) {
                log_message("üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê...");
                delay(500);
                ESP.restart();
            }
        }
        return;
    }
}

void setup_ap_mode() {
    systemState = STATE_AP;
    IPAddress ap_ip;
    log_message("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (AP)...");
    WiFi.mode(WIFI_AP);
    
    String ap_ssid = "ESP32-Radio-Setup";
    WiFi.softAP(ap_ssid.c_str());
    
    ap_ip = WiFi.softAPIP();
    log_message("AP IP: " + ap_ip.toString());
    
    set_display_mode_ap(ap_ip.toString());
}