#include <Arduino.h>
#include "wifi_manager.h"
#include "audio_manager.h"
#include "display_manager.h"
#include "web_server_manager.h"
#include "input_handler.h"
#include "system_manager.h"
#include "log_manager.h"
#include "string_utils.h"
#include "config.h"

// === –ü–û–¢–û–ö–û–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–û–ú–ê–ù–î (FreeRTOS Queue) ===
// –¢–∏–ø—ã –∫–æ–º–∞–Ω–¥ –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
enum CommandType {
    CMD_NONE = 0,
    CMD_VOLUME,          // –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
    CMD_NEXT_STATION,    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    CMD_PREV_STATION,    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    CMD_REBOOT,          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    CMD_SAVE_STATIONS    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π
};

struct SystemCommand {
    CommandType type;
    float floatValue;    // –î–ª—è CMD_VOLUME
};

// –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
QueueHandle_t commandQueue = nullptr;

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ú–ê–ù–î ===
// –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ web_server_manager.cpp

bool sendCommand(CommandType type, float value = 0.0f) {
    if (commandQueue == nullptr) return false;
    
    SystemCommand cmd;
    cmd.type = type;
    cmd.floatValue = value;
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    BaseType_t result = xQueueSend(commandQueue, &cmd, 0);
    return (result == pdTRUE);
}

// –£–¥–æ–±–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
bool sendVolumeCommand(float volume) {
    return sendCommand(CMD_VOLUME, volume);
}

bool sendNextStationCommand() {
    return sendCommand(CMD_NEXT_STATION);
}

bool sendPrevStationCommand() {
    return sendCommand(CMD_PREV_STATION);
}

bool sendRebootCommand() {
    return sendCommand(CMD_REBOOT);
}

bool sendSaveStationsCommand() {
    return sendCommand(CMD_SAVE_STATIONS);
}

void setup() {
    Serial.begin(SERIAL_BAUD_RATE);
    delay(SERIAL_INIT_DELAY);
    
    // ‚ö° –ü–ï–†–í–´–ú –î–ï–õ–û–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è
    // –≠–¢–û –ö–†–ò–¢–ò–ß–ù–û! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    check_power_stability();
    
    setup_filesystem();
    setup_logging(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ FreeRTOS
    commandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, sizeof(SystemCommand));
    if (commandQueue == nullptr) {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥!");
    }
    
    log_message("ESP32-C3 –†–∞–¥–∏–æ v4.5 (Stable Arch)");
    log_message("====================================");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É —Å–±—Ä–æ—Å–∞ (–≤–∫–ª—é—á–∞—è brown-out detection)
    check_reset_reason();
    
    bool wifi_config_exists = load_wifi_config();
    load_stations_config();
    load_state();
    save_state();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π rebootCounter
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    visualizerManager.setStyle(visualizerStyle);
    
    setup_display();
    setup_input();
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ WiFi –µ—Å—Ç—å - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (wifi_config_exists && connect_to_wifi()) {
        // --- –†–ï–ñ–ò–ú –ù–û–†–ú–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ (STA) ---
        systemState = STATE_STA;
        log_message("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç–∞–Ω—Ü–∏–∏ (STA).");
        setup_audio();
        start_web_server_sta(); // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    } else {
        // --- –†–ï–ñ–ò–ú –ù–ê–°–¢–†–û–ô–ö–ò (AP) ---
        systemState = STATE_AP;
        log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (AP).");
        setup_ap_mode();
        start_web_server_ap(); // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi
    }
    
    reset_inactivity_timer();
    log_message("\n=== –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê ===");
    print_system_status();
}

void loop() {
    // === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò–ó –û–ß–ï–†–ï–î–ò (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ) ===
    SystemCommand cmd;
    while (xQueueReceive(commandQueue, &cmd, 0) == pdTRUE) {
        switch (cmd.type) {
            case CMD_VOLUME:
                set_volume(cmd.floatValue);
                // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ debounce –≤ loop_input()
                log_message(formatString("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: %.2f", cmd.floatValue));
                break;
                
            case CMD_NEXT_STATION:
                next_station();
                log_message("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è");
                break;
                
            case CMD_PREV_STATION:
                previous_station();
                log_message("‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è");
                break;
                
            case CMD_REBOOT:
                log_message("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");
                delay(500);
                ESP.restart();
                break;
                
            case CMD_SAVE_STATIONS:
                save_stations_config();
                log_message("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
                break;
                
            default:
                break;
        }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: Audio (–ö–ê–ñ–î–£–Æ –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞!)
    // –ù–û! –ü–†–ò–û–°–¢–ê–ù–û–í–ò–¢–¨ –µ—Å–ª–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç HTML!
    static unsigned long htmlLoadStartTime = 0;
    // ATOMIC: memory_order_relaxed - –Ω–µ –Ω—É–∂–µ–Ω —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫, —Ç–æ–ª—å–∫–æ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å
    if (web_loading_html.load(std::memory_order_relaxed)) {
        if (htmlLoadStartTime == 0) {
            htmlLoadStartTime = millis();
        }
        // –ê–≤—Ç–æ—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 200ms (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞–≤–∏—Å–ª–æ)
        if (millis() - htmlLoadStartTime > 200) {
            web_loading_html.store(false, std::memory_order_relaxed);
            htmlLoadStartTime = 0;
        }
        // –ü–†–û–ü–£–°–ö–ê–ï–ú audio –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ HTML
    } else {
        htmlLoadStartTime = 0;
        if (systemState == STATE_STA) {
            loop_audio();  // –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫!
        }
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Input (—á–∞—Å—Ç–æ, –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏)
    loop_input();
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: Display (—Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 16ms = 60 FPS)
    // üéØ –ü–†–û–ü–£–°–ö–ê–ï–ú display –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è MP3
    static unsigned long lastDisplayUpdate = 0;
    bool audioDecoding = audio_decoding_active.load(std::memory_order_relaxed);
    
    if (!audioDecoding && millis() - lastDisplayUpdate >= 16) {
        loop_display();
        lastDisplayUpdate = millis();
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: WiFi Recovery (–∫–∞–∂–¥—ã–µ 500ms –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    if (systemState == STATE_STA) {
        static unsigned long lastWiFiRecoveryCheck = 0;
        if (millis() - lastWiFiRecoveryCheck >= 500) {
            handle_wifi_recovery();
            lastWiFiRecoveryCheck = millis();
        }
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 5: System tasks (—Ä–µ–¥–∫–æ - –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    if (systemState == STATE_STA) {
        static unsigned long lastSystemUpdate = 0;
        if (millis() - lastSystemUpdate >= 1000) {
            loop_system_tasks();
            lastSystemUpdate = millis();
        }
    }
    
    // –ù–ï–¢ delay()! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è audio!
    yield();  // –î–∞–µ–º –≤—Ä–µ–º—è WiFi/–≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É
}
