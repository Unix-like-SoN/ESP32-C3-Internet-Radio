#include "config.h"
#include "audio_manager.h"
#include "display_manager.h"
#include <LittleFS.h>
#include <ArduinoJson.h>
#include <mbedtls/md.h>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
WiFiCredentials wifiConfig;  // –û–¥–Ω–∞ WiFi —Å–µ—Ç—å
std::vector<RadioStation> stations;
int totalStations = 0;
WebCredentials webCredentials;

// üõ°Ô∏è –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã stations –æ—Ç race condition
SemaphoreHandle_t stationsMutex = nullptr;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ –¥–∏—Å–ø–ª–µ—è
VisualizerStyle visualizerStyle = STYLE_BARS;
uint8_t displayRotation = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é flipped

// –°–µ—Å—Å–∏—è –∏ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω
String sessionToken = "";
int rebootCounter = 0;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ---
void setup_filesystem() {
    // üõ°Ô∏è –°–æ–∑–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã stations
    stationsMutex = xSemaphoreCreateMutex();
    if (stationsMutex == nullptr) {
        Serial.println("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å stationsMutex!");
        delay(5000);
        ESP.restart();
    }
    Serial.println("‚úÖ stationsMutex —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    
    if (!LittleFS.begin()) {
        Serial.println("–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LittleFS!");
        Serial.println("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
        if (LittleFS.format()) {
            Serial.println("–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞.");
            ESP.restart();
        } else {
            Serial.println("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
        }
    } else {
        Serial.println("LittleFS —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞.");
    }
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π WiFi ---

bool load_wifi_config() {
    File configFile = LittleFS.open("/wifi.json", "r");
    if (!configFile) {
        Serial.println("–§–∞–π–ª wifi.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ AP.");
        wifiConfig.ssid = "";
        wifiConfig.password = "";
        return false; // –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º AP mode
    }

    JsonDocument doc;
    DeserializationError error = deserializeJson(doc, configFile);
    configFile.close();

    if (error) {
        Serial.print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ wifi.json: ");
        Serial.println(error.c_str());
        return false;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω—É WiFi —Å–µ—Ç—å
    JsonObject obj = doc.as<JsonObject>();
    wifiConfig.ssid = obj["ssid"].as<String>();
    wifiConfig.password = obj["password"].as<String>();
    
    if (wifiConfig.ssid.isEmpty()) {
        Serial.println("–ü—É—Å—Ç–æ–π SSID –≤ wifi.json");
        return false;
    }
    
    Serial.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WiFi –∑–∞–≥—Ä—É–∂–µ–Ω–∞: " + wifiConfig.ssid);
    return true;
}

bool save_wifi_config() {
    File configFile = LittleFS.open("/wifi.json", "w");
    if (!configFile) {
        Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å wifi.json –¥–ª—è –∑–∞–ø–∏—Å–∏.");
        return false;
    }

    JsonDocument doc;
    JsonObject obj = doc.to<JsonObject>();
    
    obj["ssid"] = wifiConfig.ssid;
    obj["password"] = wifiConfig.password;

    if (serializeJson(doc, configFile) == 0) {
        Serial.println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ wifi.json.");
        configFile.close();
        return false;
    }

    configFile.close();
    Serial.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WiFi —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + wifiConfig.ssid);
    return true;
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å—Ç–∞–Ω—Ü–∏–π ---

bool load_stations_config() {
    File configFile = LittleFS.open("/stations.json", "r");
    if (!configFile) {
        Serial.println("–§–∞–π–ª stations.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –ø—É—Å—Ç.");
        stations.clear();
        totalStations = 0;
        return false; // –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ - —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    }

    JsonDocument doc;
    DeserializationError error = deserializeJson(doc, configFile);
    configFile.close();

    if (error) {
        Serial.print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ stations.json: ");
        Serial.println(error.c_str());
        return false;
    }

    JsonArray array = doc.as<JsonArray>();
    stations.clear();
    for (JsonObject obj : array) {
        stations.push_back({
            obj["name"].as<String>(),
            obj["url"].as<String>(),
            true // isAvailable –≤—Å–µ–≥–¥–∞ true –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        });
    }
    totalStations = stations.size();
    Serial.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
    return true;
}

bool save_stations_config() {
    File configFile = LittleFS.open("/stations.json", "w");
    if (!configFile) {
        Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å stations.json –¥–ª—è –∑–∞–ø–∏—Å–∏.");
        return false;
    }

    JsonDocument doc;
    JsonArray array = doc.to<JsonArray>();

    for (const auto& station : stations) {
        JsonObject obj = array.add<JsonObject>();
        obj["name"] = station.name;
        obj["url"] = station.url;
    }

    if (serializeJson(doc, configFile) == 0) {
        Serial.println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ stations.json.");
        configFile.close();
        return false;
    }

    configFile.close();
    totalStations = stations.size();
    Serial.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
    return true;
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω—Ü–∏—è) ---

bool load_state() {
    File configFile = LittleFS.open("/state.json", "r");
    if (!configFile) {
        Serial.println("–§–∞–π–ª state.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        return false;
    }

    JsonDocument doc;
    DeserializationError error = deserializeJson(doc, configFile);
    configFile.close();

    if (error) {
        Serial.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ state.json.");
        return false;
    }

    volume = doc["volume"] | VOLUME_DEFAULT;
    currentStation = doc["station"] | 0;
    displayRotation = doc["displayRotation"] | 2; // default: 2 (flipped)
    visualizerStyle = (VisualizerStyle)(doc["visualizerStyle"] | STYLE_BARS);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
    sessionToken = doc["sessionToken"] | "";
    rebootCounter = doc["rebootCounter"] | 0;
    
    if (sessionToken.length() > 0) {
        Serial.printf("üîë Session token –∑–∞–≥—Ä—É–∂–µ–Ω: %s...\n", sessionToken.substring(0, 8).c_str());
    } else {
        Serial.println("‚ùå Session token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
    }
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
    rebootCounter++;
    
    // –ö–∞–∂–¥—ã–µ 25 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    if (rebootCounter >= 25) {
        Serial.println("‚ùó 25 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏!");
        sessionToken = "";
        rebootCounter = 0;
    }
    
    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–¥–µ—Å—å! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ main.cpp –ø–æ—Å–ª–µ setup
    
    Serial.printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: –ì—Ä–æ–º–∫–æ—Å—Ç—å=%.2f, –°—Ç–∞–Ω—Ü–∏—è=%d, –ü–æ–≤–æ—Ä–æ—Ç=%d, –°—Ç–∏–ª—å=%d, Reboot=%d/25\n", volume, currentStation, displayRotation, visualizerStyle, rebootCounter);
    return true;
}

void save_state() {
    File configFile = LittleFS.open("/state.json", "w");
    if (!configFile) {
        Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å state.json –¥–ª—è –∑–∞–ø–∏—Å–∏.");
        return;
    }

    JsonDocument doc;
    doc["volume"] = volume;
    doc["station"] = currentStation;
    doc["displayRotation"] = displayRotation;
    doc["visualizerStyle"] = (int)visualizerStyle;
    doc["sessionToken"] = sessionToken;
    doc["rebootCounter"] = rebootCounter;

    if (serializeJson(doc, configFile) == 0) {
        Serial.println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ state.json.");
    } else {
        Serial.println("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
    }
    configFile.close();
}
