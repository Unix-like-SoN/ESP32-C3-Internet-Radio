#include <Arduino.h>
#include <atomic>
#include "config.h"
#include "input_handler.h"
#include "audio_manager.h"
#include "display_manager.h"
#include "system_manager.h"

// ATOMIC: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ISR (–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏) —ç–Ω–∫–æ–¥–µ—Ä–∞
// –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç memory barriers
std::atomic<int16_t> encoderPos(0);
std::atomic<bool> encoderChanged(false);

// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏
unsigned long buttonPressStartTime = 0;
bool buttonHeld = false;
const unsigned long shortPressDuration = INPUT_SHORT_PRESS;
const unsigned long longPressDuration = INPUT_LONG_PRESS;
const unsigned long doubleClickMaxDelay = INPUT_DOUBLE_CLICK_DELAY;
unsigned long singleClickPendingTime = 0; // 0, –µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

// === DEBOUNCE –°–û–•–†–ê–ù–ï–ù–ò–Ø –ì–†–û–ú–ö–û–°–¢–ò (–∑–∞—â–∏—Ç–∞ –æ—Ç –∏–∑–Ω–æ—Å–∞ Flash) ===
static unsigned long lastVolumeSaveTime = 0;
static bool volumePendingSave = false;

void IRAM_ATTR encoderISR() {
    static unsigned long lastInterrupt = 0;
    unsigned long interruptTime = millis();
    
    // Debounce: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    if (interruptTime - lastInterrupt < INPUT_DEBOUNCE_TIME) {
        return;
    }
    lastInterrupt = interruptTime;
    
    // === QUADRATURE DECODER: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
    // –î–ª—è KY-040: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã
    static uint8_t lastState = 0;
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ–∏—Ö –ø–∏–Ω–æ–≤
    uint8_t clk = digitalRead(ENCODER_CLK);
    uint8_t dt = digitalRead(ENCODER_DT);
    uint8_t currentState = (clk << 1) | dt;  // 2-–±–∏—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: CLK|DT
    
    // –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Gray code)
    // –ü–æ —á–∞—Å–æ–≤–æ–π: 00 -> 10 -> 11 -> 01 -> 00
    // –ü—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π: 00 -> 01 -> 11 -> 10 -> 00
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (lastState == 0b00 && currentState == 0b10) {  // 0 -> 2: –ø–æ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_add(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b00 && currentState == 0b01) {  // 0 -> 1: –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_sub(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b10 && currentState == 0b11) {  // 2 -> 3: –ø–æ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_add(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b01 && currentState == 0b11) {  // 1 -> 3: –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_sub(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b11 && currentState == 0b01) {  // 3 -> 1: –ø–æ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_add(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b11 && currentState == 0b10) {  // 3 -> 2: –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_sub(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b01 && currentState == 0b00) {  // 1 -> 0: –ø–æ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_add(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    } else if (lastState == 0b10 && currentState == 0b00) {  // 2 -> 0: –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π
        encoderPos.fetch_sub(1, std::memory_order_relaxed);
        encoderChanged.store(true, std::memory_order_relaxed);
    }
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã (–¥—Ä–µ–±–µ–∑–≥)
    
    lastState = currentState;
}

void setup_input() {
    pinMode(ENCODER_CLK, INPUT_PULLUP);
    pinMode(ENCODER_DT, INPUT_PULLUP);
    pinMode(ENCODER_SW, INPUT_PULLUP);
    
    // ‚ö° –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ –û–ë–ê –ø–∏–Ω–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    attachInterrupt(digitalPinToInterrupt(ENCODER_CLK), encoderISR, CHANGE);
    attachInterrupt(digitalPinToInterrupt(ENCODER_DT), encoderISR, CHANGE);
    
    Serial.printf("‚úÖ –≠–Ω–∫–æ–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: CLK=%d, DT=%d, SW=%d (quadrature decoder)\n", 
                  ENCODER_CLK, ENCODER_DT, ENCODER_SW);
}

void loop_input() {
    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞ (–≥—Ä–æ–º–∫–æ—Å—Ç—å) ---
    // ATOMIC: —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –±–ª–∞–≥–æ–¥–∞—Ä—è atomic
    if (encoderChanged.load(std::memory_order_relaxed)) {
        // –ß–∏—Ç–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞—Ç–æ–º–∞—Ä–Ω–æ
        int16_t currentPos = encoderPos.load(std::memory_order_relaxed);
        encoderChanged.store(false, std::memory_order_relaxed);
        
        static int16_t lastPos = 0;
        if (currentPos != lastPos) {
            float new_volume = volume;
            if (currentPos > lastPos) {
                new_volume = min(VOLUME_MAX, volume + VOLUME_STEP);
            } else {
                new_volume = max(VOLUME_MIN, volume - VOLUME_STEP);
            }
            set_volume(new_volume);
            
            // ‚úÖ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É - –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
            volumePendingSave = true;
            lastVolumeSaveTime = millis();
            lastPos = currentPos;
        }
    }

    // --- –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (debounce) ---
    if (volumePendingSave && millis() - lastVolumeSaveTime > VOLUME_SAVE_DELAY) {
        save_state();
        volumePendingSave = false;
        Serial.printf("üíæ –ì—Ä–æ–º–∫–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: %.2f (debounced)\n", volume);
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞ ---
    if (singleClickPendingTime != 0 && millis() - singleClickPendingTime > doubleClickMaxDelay) {
        next_station();
        singleClickPendingTime = 0;
    }
    
    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—Å–º–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ / –≤—ã–∫–ª—é—á–µ–Ω–∏–µ) ---
    if (digitalRead(ENCODER_SW) == LOW) {
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
        if (!buttonHeld) {
            // –≠—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–∞—Ç–∏—è
            buttonHeld = true;
            buttonPressStartTime = millis();
        } else {
            // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ –µ—â–µ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            unsigned long holdDuration = millis() - buttonPressStartTime;
            if (holdDuration >= longPressDuration) {
                // –£–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
                shutdown_system();
            } else if (holdDuration > INPUT_SHUTDOWN_ANIM_START) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∏—è
                float progress = (float)holdDuration / longPressDuration;
                show_shutdown_progress(progress);
            }
        }
    } else {
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞
        if (buttonHeld) {
            buttonHeld = false;
            unsigned long holdDuration = millis() - buttonPressStartTime;
            if (holdDuration < shortPressDuration) {
                // –≠—Ç–æ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                if (singleClickPendingTime != 0) {
                    // –≠—Ç–æ –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Ç.–∫. –ø–µ—Ä–≤–æ–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    previous_station();
                    singleClickPendingTime = 0; // –û—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ
                } else {
                    // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Å—Ç–∞–≤–∏–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
                    singleClickPendingTime = millis();
                }
            } else {
                // –≠—Ç–æ –±—ã–ª–æ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è.
                // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤ –∏–Ω—Ñ–æ-—Ä–µ–∂–∏–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∏–∫.
                singleClickPendingTime = 0;
                reset_inactivity_timer();
            }
        }
    }
}

// === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ì–†–û–ú–ö–û–°–¢–ò ===
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ shutdown –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
void force_save_volume() {
    if (volumePendingSave) {
        save_state();
        volumePendingSave = false;
        Serial.println("üíæ –ì—Ä–æ–º–∫–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏ shutdown");
    }
}