#include <AudioFileSourceHTTPStream.h>
#include <AudioFileSourceBuffer.h>
#include <AudioGeneratorMP3.h>
#include <AudioOutputI2S.h>
#include "config.h"
#include "audio_manager.h"
#include "display_manager.h"
#include "log_manager.h"
#include "wifi_manager.h"
#include "url_validator.h"
#include "string_utils.h"
#include <WiFi.h>

// --- –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¢–û–†–ê –ß–ï–†–ï–ó ConsumeSample ---

void process_audio_data_for_visualizer(const int16_t *data, int len);

class AudioOutputWithVisualizer : public AudioOutputI2S {
private:
    int16_t sample_buffer[VISUALIZER_SAMPLE_BUFFER];
    int buffer_pos = 0;
    
    // üõ°Ô∏è –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    static unsigned long overflow_count;
    static unsigned long last_overflow_warning;

public:
  AudioOutputWithVisualizer() : AudioOutputI2S() {}

  virtual bool ConsumeSample(int16_t sample[2]) override {
    // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
    if (buffer_pos < VISUALIZER_SAMPLE_BUFFER) {
        sample_buffer[buffer_pos++] = sample[0];
    } else {
        // –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑ –≤ WARNING_LOG_INTERVAL
        overflow_count++;
        if (millis() - last_overflow_warning > WARNING_LOG_INTERVAL) {
            Serial.printf("‚ö†Ô∏è Visualizer buffer overflow: %lu times\n", overflow_count);
            last_overflow_warning = millis();
            overflow_count = 0;
        }
    }

    if (buffer_pos >= VISUALIZER_SAMPLE_BUFFER) {
        // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–µ–∫–∞ –≤–Ω—É—Ç—Ä–∏
        process_audio_data_for_visualizer(sample_buffer, buffer_pos * sizeof(int16_t));
        buffer_pos = 0;
    }
    
    return AudioOutputI2S::ConsumeSample(sample);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
unsigned long AudioOutputWithVisualizer::overflow_count = 0;
unsigned long AudioOutputWithVisualizer::last_overflow_warning = 0;

// --- –ö–û–ù–ï–¶ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò ---

AudioGeneratorMP3 *mp3 = nullptr;
AudioFileSourceHTTPStream *file = nullptr;
AudioFileSourceBuffer *buff = nullptr;
AudioOutputWithVisualizer *out_with_visualizer = nullptr;

int currentStation = 0;
float volume = VOLUME_DEFAULT;

AudioState audioState = AUDIO_IDLE;
unsigned long audioStateTime = 0;

// üéØ –§–ª–∞–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∞—É–¥–∏–æ –Ω–∞–¥ display
std::atomic<bool> audio_decoding_active(false);

// üö´ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ next_station –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
static bool isChangingStation = false;

// ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ I2S
static bool i2sInitialized = false;
static unsigned long lastI2SInitAttempt = 0;

void cleanup_audio();
bool init_audio_non_blocking();
int find_available_station(int direction);
void mark_station_as_unavailable(int stationIndex);
void try_reinit_i2s();

void setup_audio() {
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –£–¢–ï–ß–ö–ò –ü–ê–ú–Ø–¢–ò: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (out_with_visualizer) {
        delete out_with_visualizer;
        out_with_visualizer = nullptr;
        log_message("üîÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–π AudioOutput —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π");
    }
    
    out_with_visualizer = new AudioOutputWithVisualizer();
    
    // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ I2S
    if (!out_with_visualizer->SetPinout(I2S_BCLK, I2S_LRC, I2S_DOUT)) {
        log_message("‚ö†Ô∏è I2S –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...");
        i2sInitialized = false;
        lastI2SInitAttempt = millis();
        return;
    }
    
    i2sInitialized = true;
    out_with_visualizer->SetGain(volume);
    log_message("‚úÖ I2S –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (BCLK=GPIO4, LRC=GPIO5, DIN=GPIO6)");
}

// ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ I2S
void try_reinit_i2s() {
    if (i2sInitialized) return; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    
    unsigned long now = millis();
    if (now - lastI2SInitAttempt < AUDIO_I2S_RETRY_INTERVAL) return; // –ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ AUDIO_I2S_RETRY_INTERVAL
    
    lastI2SInitAttempt = now;
    log_message("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ I2S...");
    
    // üõ°Ô∏è GRACEFUL CLEANUP: –æ—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    if (audioState != AUDIO_IDLE) {
        cleanup_audio();
        audioState = AUDIO_IDLE;
    }
    
    if (out_with_visualizer && out_with_visualizer->SetPinout(I2S_BCLK, I2S_LRC, I2S_DOUT)) {
        i2sInitialized = true;
        out_with_visualizer->SetGain(volume);
        log_message("‚úÖ I2S –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏!");
    }
}

void IRAM_ATTR loop_audio() {
    // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è I2S
    try_reinit_i2s();
    if (!i2sInitialized) return; // I2S –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ
    
    // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç race condition: –ø—Ä–æ–≤–µ—Ä—è–µ–º stations.empty() –ø–æ–¥ –º—å—é—Ç–µ–∫—Å–æ–º
    STATIONS_LOCK();
    bool stationsEmpty = stations.empty();
    STATIONS_UNLOCK();
    
    if (stationsEmpty) {
        if (audioState != AUDIO_IDLE) {
            cleanup_audio();
            audioState = AUDIO_IDLE;
        }
        return;
    }

    if (audioState != AUDIO_PLAYING) {
        init_audio_non_blocking();
    }

    if (audioState == AUDIO_PLAYING && mp3 && mp3->isRunning()) {
        // üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –≤—Ä–µ–º—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        audio_decoding_active.store(true, std::memory_order_relaxed);
        
        if (!mp3->loop()) {
            log_message("–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");
            audioState = AUDIO_IDLE;
        }
        
        audio_decoding_active.store(false, std::memory_order_relaxed);
    } else {
        // –ù–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        audio_decoding_active.store(false, std::memory_order_relaxed);
    }
    
    if (audioState == AUDIO_CONNECTING || audioState == AUDIO_STARTING) {
        if (millis() - audioStateTime > AUDIO_CONNECTION_TIMEOUT) {
            log_message("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞–Ω—Ü–∏–∏. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å.");
            audioState = AUDIO_ERROR;
        }
    }
}

void IRAM_ATTR next_station() {
    if (stations.empty() || isChangingStation) return;
    
    isChangingStation = true;  // üö´ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    
    audioState = AUDIO_IDLE;
    cleanup_audio();
    
    int oldStation = currentStation;
    currentStation = find_available_station(1);
    
    log_message(formatString("Next: %s -> %s", stations[oldStation].name.c_str(), stations[currentStation].name.c_str()));
    
    reset_inactivity_timer();
    audioState = AUDIO_IDLE;
    
    isChangingStation = false;  // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
}

void IRAM_ATTR previous_station() {
    if (stations.empty() || isChangingStation) return;
    
    isChangingStation = true;  // üö´ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    
    audioState = AUDIO_IDLE;
    cleanup_audio();
    
    int oldStation = currentStation;
    currentStation = find_available_station(-1);
    
    log_message(formatString("Prev: %s -> %s", stations[oldStation].name.c_str(), stations[currentStation].name.c_str()));
    
    reset_inactivity_timer();
    audioState = AUDIO_IDLE;
    
    isChangingStation = false;  // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
}

void IRAM_ATTR set_volume(float new_volume) {
    volume = new_volume;
    if (out_with_visualizer) {
        out_with_visualizer->SetGain(volume);
    }
    reset_inactivity_timer();
}

void force_audio_reset() {
    audioState = AUDIO_IDLE;
    cleanup_audio();
}

void cleanup_audio() {
    if (mp3) {
        mp3->stop();
        delete mp3;
        mp3 = nullptr;
    }
    if (buff) {
        delete buff;
        buff = nullptr;
    }
    if (file) {
        delete file;
        file = nullptr;
    }
}

bool init_audio_non_blocking() {
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ RACE CONDITION: –ø—Ä–æ–≤–µ—Ä—è–µ–º stations.empty() –ø–æ–¥ –º—å—é—Ç–µ–∫—Å–æ–º
    STATIONS_LOCK();
    bool stationsEmpty = stations.empty();
    STATIONS_UNLOCK();
    
    if (stationsEmpty) return false;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è WiFi recovery
    if (wifiRecoveryState != WIFI_OK) {
        if (audioState != AUDIO_IDLE) {
            cleanup_audio();
            audioState = AUDIO_IDLE;
        }
        return false;
    }

    switch (audioState) {
        case AUDIO_IDLE: {
            if (WiFi.status() != WL_CONNECTED) return false;
            cleanup_audio();
            
            // üõ°Ô∏è –ß–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–¥ –º—å—é—Ç–µ–∫—Å–æ–º
            STATIONS_LOCK();
            String stationName = stations[currentStation].name;
            STATIONS_UNLOCK();
            
            show_message("Connecting to", stationName);
            log_message(formatString("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s", stationName.c_str()));
            audioState = AUDIO_CONNECTING;
            audioStateTime = millis();
            return false;
        }
            
        case AUDIO_CONNECTING: {
            if (millis() - audioStateTime > AUDIO_STATE_DELAY) {
                // üõ°Ô∏è –ß–∏—Ç–∞–µ–º URL –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥ –º—å—é—Ç–µ–∫—Å–æ–º
                STATIONS_LOCK();
                String url = stations[currentStation].url;
                String stationName = stations[currentStation].name;
                STATIONS_UNLOCK();
                
                // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø URL (–∑–∞—â–∏—Ç–∞ –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π)
                URLValidationResult validation = validateURL(url);
                
                if (validation != URL_VALID) {
                    // URL –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
                    String errorMsg = getValidationErrorMessage(validation);
                    String safeURL = sanitizeURLForLog(url);
                    
                    log_message(formatString("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: %s", safeURL.c_str()));
                    log_message(formatString("‚ö†Ô∏è –û—à–∏–±–∫–∞: %s", errorMsg.c_str()));
                    
                    show_message("Invalid URL", stationName);
                    mark_station_as_unavailable(currentStation);
                    audioState = AUDIO_ERROR;
                    return false;
                }
                
                // URL –≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ª–æ–≥–æ–≤
                String safeURL = sanitizeURLForLog(url);
                log_message(formatString("URL: %s", safeURL.c_str()));
                
                file = new AudioFileSourceHTTPStream(url.c_str());
                if (file) {
                    buff = new AudioFileSourceBuffer(file, AUDIO_BUFFER_SIZE);
                    if (buff) {
                        mp3 = new AudioGeneratorMP3();
                        if (mp3) {
                            audioState = AUDIO_STARTING;
                            audioStateTime = millis();
                        }
                    }
                }
                if (audioState != AUDIO_STARTING) {
                    audioState = AUDIO_ERROR;
                }
            }
            return false;
        }
            
        case AUDIO_STARTING: {
            if (mp3 && mp3->begin(buff, out_with_visualizer)) {
                out_with_visualizer->SetGain(volume);
                audioState = AUDIO_BUFFERING;  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
                audioStateTime = millis();
                log_message("–î–µ–∫–æ–¥–µ—Ä –≥–æ—Ç–æ–≤, –∑–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä...");
                return false;
            }
            if (millis() - audioStateTime > AUDIO_START_TIMEOUT) {
                log_message("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞");
                audioState = AUDIO_ERROR;
            }
            return false;
        }
            
        case AUDIO_BUFFERING: {
            // –ñ–¥—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
            if (buff && buff->getFillLevel() > AUDIO_BUFFER_SIZE * AUDIO_BUFFER_LOW_THRESHOLD / 100) {
                // –ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 20% - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å
                audioState = AUDIO_PLAYING;
                stations[currentStation].isAvailable = true;
                log_message(formatString("–ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω (%d / %d), —Å—Ç–∞—Ä—Ç!", buff->getFillLevel(), AUDIO_BUFFER_SIZE));
                reset_inactivity_timer();
                return true;
            }
            
            // –¢–∞–π–º–∞—É—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
            if (millis() - audioStateTime > AUDIO_PREBUFFER_TIME) {
                log_message("–¢–∞–π–º–∞—É—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å");
                audioState = AUDIO_PLAYING;
                stations[currentStation].isAvailable = true;
                reset_inactivity_timer();
                return true;
            }
            return false;
        }
            
        case AUDIO_ERROR: {
            log_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞–Ω—Ü–∏–∏. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é...");
            mark_station_as_unavailable(currentStation);
            next_station(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é
            return false;
        }
            
        case AUDIO_PLAYING: {
            return true;
        }
    }
    return false;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
// direction: 1 = —Å–ª–µ–¥—É—é—â–∞—è, -1 = –ø—Ä–µ–¥—ã–¥—É—â–∞—è
int find_available_station(int direction) {
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ RACE CONDITION: –∑–∞—Ö–≤–∞—Ç –º—å—é—Ç–µ–∫—Å–∞ –Ω–∞ –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é
    // –¢–∞–∫ –∫–∞–∫ –º—ã —á–∏—Ç–∞–µ–º/–ø–∏—à–µ–º stations –≤ —Ü–∏–∫–ª–µ, –Ω—É–∂–Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å
    STATIONS_LOCK();
    
    if (totalStations == 0) {
        STATIONS_UNLOCK();
        return 0;
    }
    if (totalStations == 1) {
        STATIONS_UNLOCK();
        return 0;  // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è
    }
    
    int attempts = 0;
    int station = currentStation;
    
    do {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π/–ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        if (direction > 0) {
            station = (station + 1) % totalStations;
        } else {
            station = (station - 1 + totalStations) % totalStations;
        }
        attempts++;
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥ - –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        if (attempts > totalStations) {
            log_message("‚ö†Ô∏è –í—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! –°–±—Ä–∞—Å—ã–≤–∞—é —Ñ–ª–∞–≥–∏.");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ isAvailable
            for (int i = 0; i < totalStations; i++) {
                stations[i].isAvailable = true;
            }
            
            STATIONS_UNLOCK();
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê: –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞–Ω—Ü–∏—é
            // –ê –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑ —Ü–∏–∫–ª–∞ (–∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å currentStation)
            if (direction > 0) {
                return (currentStation + 1) % totalStations;
            } else {
                return (currentStation - 1 + totalStations) % totalStations;
            }
        }
    } while (!stations[station].isAvailable);
    
    STATIONS_UNLOCK();
    return station;
}

void mark_station_as_unavailable(int stationIndex) {
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ RACE CONDITION: –∑–∞—Ö–≤–∞—Ç –º—å—é—Ç–µ–∫—Å–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º stations
    STATIONS_LOCK();
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å—Å–∏–≤–∞ (bounds check)
    if (stationIndex < 0 || stationIndex >= totalStations) {
        STATIONS_UNLOCK();
        log_message(formatString("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–º–µ—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é: –∏–Ω–¥–µ–∫—Å %d", stationIndex));
        return;
    }
    
    stations[stationIndex].isAvailable = false;
    String stationName = stations[stationIndex].name; // –ö–æ–ø–∏—è –¥–ª—è –ª–æ–≥–∞
    
    STATIONS_UNLOCK();
    
    log_message(formatString("%s –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è", stationName.c_str()));
}

// üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
void process_audio_data_for_visualizer(const int16_t *data, int len) {
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (data == nullptr || len <= 0) return;
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ (min VISUALIZER_MIN_STACK –±–∞–π—Ç)
    // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ IRAM –≤–æ –≤—Ä–µ–º—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    UBaseType_t freeStack = uxTaskGetStackHighWaterMark(NULL);
    
    if (freeStack < VISUALIZER_MIN_STACK) {
        // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–µ–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        static unsigned long lastWarning = 0;
        if (millis() - lastWarning > WARNING_LOG_INTERVAL) {
            Serial.printf("‚ö†Ô∏è Stack LOW: %u bytes (min %u)\n", freeStack, VISUALIZER_MIN_STACK);
            lastWarning = millis();
        }
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }
    
    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    int sample_count = len / sizeof(int16_t);
    if (sample_count < VISUALIZER_BANDS) return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è VISUALIZER_BANDS –ø–æ–ª–æ—Å
    
    int band_size = sample_count / VISUALIZER_BANDS;
    if (band_size == 0) return;
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    int max_index = (VISUALIZER_BANDS - 1) * band_size + (band_size - 1);
    if (max_index >= sample_count) {
        // –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º band_size
        band_size = sample_count / VISUALIZER_BANDS;
    }

    // 5. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ VISUALIZER_BANDS –ø–æ–ª–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü
    for (int i = 0; i < VISUALIZER_BANDS; i++) {
        long total = 0;
        int start_idx = i * band_size;
        int end_idx = start_idx + band_size;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
        if (end_idx > sample_count) {
            end_idx = sample_count;
        }
        
        for (int j = start_idx; j < end_idx; j++) {
            total += abs(data[j]);
        }
        
        int actual_band_size = end_idx - start_idx;
        if (actual_band_size > 0) {
            long avg_amplitude = total / actual_band_size;
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            visualizerBands[i] = constrain(map(avg_amplitude, 0, VISUALIZER_MAX_AMPLITUDE, 0, SCREEN_HEIGHT), 0, SCREEN_HEIGHT);
        } else {
            visualizerBands[i] = 0;
        }
    }
}
