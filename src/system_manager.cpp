#include <Arduino.h>
#include <WiFi.h>
#include <esp_sleep.h>
#include <esp_system.h>
#include "config.h"
#include "system_manager.h"
#include "wifi_manager.h"
#include "audio_manager.h"
#include "display_manager.h"
#include "input_handler.h"
#include "log_manager.h"
#include "string_utils.h"

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
SystemState systemState = STATE_STA; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∂–∏–º —Å—Ç–∞–Ω—Ü–∏–∏

static unsigned long lastStatusPrint = 0;

// === –ü–†–û–í–ï–†–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–ò–¢–ê–ù–ò–Ø –ü–†–ò –°–¢–ê–†–¢–ï ===
void check_power_stability() {
    Serial.println("\n‚ö° –ü–†–û–í–ï–†–ö–ê –ü–ò–¢–ê–ù–ò–Ø...");
    
    // 1. –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è
    // –ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã –Ω–∞ –ø–ª–∞—Ç–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è
    delay(POWER_STABILIZATION_DELAY);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ –±—ã–ª–æ brown-out –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    esp_reset_reason_t reason = esp_reset_reason();
    bool wasBrownout = (reason == ESP_RST_BROWNOUT);
    
    if (wasBrownout) {
        Serial.println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–±—Ä–æ—Å –±—ã–ª –∏–∑-–∑–∞ brown-out!");
        Serial.println("‚ö° –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è...");
        delay(POWER_BROWNOUT_EXTRA_DELAY); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ –±—ã–ª brown-out
    }
    
    // 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ brown-out detector
    Serial.println("‚úÖ Brown-out Detector –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ—Ä–æ–≥: 2.51V)");
    Serial.println("üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã:");
    Serial.println("   - ESP32-C3: 2.3V - 3.6V (–Ω–æ–º–∏–Ω–∞–ª: 3.3V)");
    Serial.println("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ: 3.0V - 3.3V");
    Serial.println("   - USB –ø–∏—Ç–∞–Ω–∏–µ: 5.0V ‚Üí 3.3V (LDO –Ω–∞ –ø–ª–∞—Ç–µ)");
    
    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
    if (wasBrownout) {
        Serial.println("\nüî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∏—Ç–∞–Ω–∏–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!");
        Serial.println("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        Serial.println("  1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π USB –∫–∞–±–µ–ª—å (–∫–æ—Ä–æ—Ç–∫–∏–π, —Ç–æ–ª—Å—Ç—ã–π)");
        Serial.println("  2. USB –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å ‚â•500mA (–ª—É—á—à–µ ‚â•1A)");
        Serial.println("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è (VCC/GND)");
        Serial.println("  4. –î–ª—è MAX98357A –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ 5V/2A");
        Serial.println("  5. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä 100-470uF –Ω–∞ 5V –ª–∏–Ω–∏—é\n");
    } else {
        Serial.println("‚úÖ –ü–∏—Ç–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...\n");
    }
}

// === –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ß–ò–ù–´ –°–ë–†–û–°–ê ===
void check_reset_reason() {
    esp_reset_reason_t reason = esp_reset_reason();
    
    String resetReason;
    bool isCritical = false;
    
    switch (reason) {
        case ESP_RST_POWERON:
            resetReason = "Power-on reset (—Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç)";
            break;
        case ESP_RST_SW:
            resetReason = "Software reset (ESP.restart())";
            break;
        case ESP_RST_PANIC:
            resetReason = "‚ö†Ô∏è PANIC! –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Å–±–æ–π (exception/abort)";
            isCritical = true;
            break;
        case ESP_RST_INT_WDT:
            resetReason = "‚ö†Ô∏è WATCHDOG! Interrupt watchdog timeout";
            isCritical = true;
            break;
        case ESP_RST_TASK_WDT:
            resetReason = "‚ö†Ô∏è WATCHDOG! Task watchdog timeout";
            isCritical = true;
            break;
        case ESP_RST_WDT:
            resetReason = "‚ö†Ô∏è WATCHDOG! Other watchdog reset";
            isCritical = true;
            break;
        case ESP_RST_DEEPSLEEP:
            resetReason = "Wake up from deep sleep";
            break;
        case ESP_RST_BROWNOUT:
            resetReason = "üî¥ BROWN-OUT! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è";
            isCritical = true;
            break;
        case ESP_RST_SDIO:
            resetReason = "Reset over SDIO";
            break;
        default:
            resetReason = "Unknown reset (" + String((int)reason) + ")";
            break;
    }
    
    if (isCritical) {
        Serial.println("\n========================================");
        Serial.println("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ë–†–û–° ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è");
        Serial.println("–ü—Ä–∏—á–∏–Ω–∞: " + resetReason);
        Serial.println("========================================\n");
        log_message(concatOptimized("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ë–†–û–°: ", resetReason));
        
        // –ï—Å–ª–∏ –±—ã–ª brown-out - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–∏—Ç–∞–Ω–∏—è
        if (reason == ESP_RST_BROWNOUT) {
            log_message("‚ö° –ü–†–û–í–ï–†–¨–¢–ï –ü–ò–¢–ê–ù–ò–ï! –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —É–ø–∞–ª–æ –Ω–∏–∂–µ 2.51V");
            log_message("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
            log_message("- –°–ª–∞–±—ã–π USB –∫–∞–±–µ–ª—å/–ø–æ—Ä—Ç");
            log_message("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ç–æ–∫ (–Ω—É–∂–Ω–æ >500mA)");
            log_message("- –ü–ª–æ—Ö–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–∏—Ç–∞–Ω–∏—è");
        }
    } else {
        Serial.println("–ü—Ä–∏—á–∏–Ω–∞ —Å–±—Ä–æ—Å–∞: " + resetReason);
        log_message(concatOptimized("–°–±—Ä–æ—Å: ", resetReason));
    }
}

void loop_system_tasks() {
    // WiFi recovery —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ main loop
    
    if (millis() - lastStatusPrint > SYSTEM_STATUS_INTERVAL) {
        print_system_status();
        lastStatusPrint = millis();
    }
}

void print_system_status() {
    const char* stateNames[] = {"IDLE", "CONNECTING", "STARTING", "PLAYING", "ERROR"};
    
    Serial.println("\n=== –°–¢–ê–¢–£–° ===");
    if (WiFi.getMode() == WIFI_AP) {
        Serial.println("–†–µ–∂–∏–º: –¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (AP)");
        Serial.printf("IP: %s\n", WiFi.softAPIP().toString().c_str());
    } else {
        Serial.println("–†–µ–∂–∏–º: –°—Ç–∞–Ω—Ü–∏—è (STA)");
        Serial.printf("WiFi: %s (%ld dBm)\n", 
                      WiFi.status() == WL_CONNECTED ? WiFi.localIP().toString().c_str() : "–û—Ç–∫–ª—é—á–µ–Ω", 
                      WiFi.RSSI());
    }

    if (!stations.empty()) {
        Serial.printf("–ê—É–¥–∏–æ: %s\n", stateNames[audioState]);
        Serial.printf("–°—Ç–∞–Ω—Ü–∏—è: %s (%s)\n", 
                      stations[currentStation].name.c_str(),
                      stations[currentStation].isAvailable ? "OK" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        Serial.printf("–ì—Ä–æ–º–∫–æ—Å—Ç—å: %.2f\n", volume);
    } else {
        Serial.println("–ê—É–¥–∏–æ: –ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.");
    }
    
    Serial.printf("RAM: %d –±–∞–π—Ç\n", ESP.getFreeHeap());
    Serial.printf("–í—Ä–µ–º—è: %lu –º–∏–Ω\n", millis() / 60000);
    Serial.println("=================");
}

void shutdown_system() {
    Serial.println("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª—É–±–æ–∫–∏–π —Å–æ–Ω.");
    show_message("Goodbye!", "", 500);
    
    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ save_state()
    force_save_volume();
    save_state(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
    
    force_audio_reset();
    WiFi.disconnect(true);
    WiFi.mode(WIFI_OFF);
    
    turn_off_display();
    delay(100);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–Ω–∫–æ–¥–µ—Ä–∞ (–∏–∑ config.h)
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –ø–∏–Ω –∫ –∑–µ–º–ª–µ (LOW)
    const uint64_t ext_wakeup_pin_mask = 1ULL << ENCODER_SW;
    esp_deep_sleep_enable_gpio_wakeup(ext_wakeup_pin_mask, ESP_GPIO_WAKEUP_GPIO_LOW); 
    
    Serial.println("–í—Ö–æ–¥ –≤ –≥–ª—É–±–æ–∫–∏–π —Å–æ–Ω...");
    esp_deep_sleep_start();
}
